depfinder is a tool that finds the dependencies of Slackware packages.

depfinder is much faster than requiredbuilder, a very nice script
by Stefano Stabellini that I used in the past to find package
dependencies. But requiredbuilder is written entirely in bash and I
had always thought that optimizing the search routines in C or C++
would make the whole process a lot faster. So, the speed difference
mainly comes from the C++ code that is used in depfinder to find in
which package each individual library is included. That C++ code is
'borrowed' (as in blatanly ripped) from Nigel Bosch's zpm code.

depfinder also has support for running multiple jobs in parallel that
makes it a lot faster when used with multiple CPUs/cores.

The dependency list is by default being output in a comma separated
list, without version information, but there are options to output
dependencies with version information and to a file: a .dep file
with a comma separated list without version information, or a
slack-required file with version information, respectively.

Note that I don't really agree with version information in
dependency lists. "libxyz >= 1.0-i486-2gv" actually doesn't always
mean that the package will work with any version of libxyz greater
than 1.0. There will be cases that it will have to be rebuilt with
a new libxyz version. Also the check will fail if someone has
"libxyz >= 1.0-i486-1xy" installed since "1xy"<"2gv". But the two
libxyz packages might really be identical otherwise. Using
"libxyz = 1.0-i486-2gv" is not a solution, since the check will
always fail with any subsequent libxyz packages, prompting for
a package rebuild, which would be completely unnecessary. But this is
the format used as standard for slack-required files that are used by
many slackware-based projects, so I added support for it anyway.

I also don't personally agree with slack-required files being
inside packages, which I think is a very poor and inefficient design.
A simple change in the dependency list, which would otherwise require
the editing of a text file only, requires rebuilding the package.
But that's really a whole different matter and I'll stop my ranting
now, since everyone can do whatever he wants with the dependency list
he gets with depfinder.

depfinder will only find dependencies of binary files, scripts (bash,
python, perl etc)are not supported in any way. It is impossible for
*any* tool to provide a full list of dependencies when it comes to
scripts; for example it would be easy to check the header of a script
for something like #!/usr/bin/python to determine if it's a python
script, but what happens if this python script imports a python library
that is not included in the standard python package, like pil (python
imaging library)? There is no easy way to discover that dependency and
adding code that would work with only a limited number of cases, but
otherwise giving the impression that it will work is not something I
would like to have. It's better to create the dependency file manually
in those cases. Packagers usually have an idea of what those kind of
packages require to install and work anyway.

Apart from basic shell commands, like ls, sed, touch etc, depfinder
requires python and util-linux-ng to be installed. You also need to
have the gcc-g++ compiler, so that depfinder-search can be compiled.

A huge thanks goes to Nigel Bosch for creating the original code for his
zpm package manager and making it available in the first place.
